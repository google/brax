syntax = "proto3";

package brax;

// A point or scalar value in 3d space.
message Vector3 {
  float x = 1;
  float y = 2;
  float z = 3;
}

// Prevents motion or rotation along specifed axes.
message Frozen {
  // Freeze motion along the x, y, or z axes.
  Vector3 position = 1;
  // Freeze rotation around the x, y, or z axes.
  Vector3 rotation = 2;
  // Override all the position and rotation fields, setting them to 1.
  bool all = 3;
}

// Bodies have a rigid shape, mass, and rotational inertia. Bodies may connect
// to other bodies via joints, forming a kinematic tree.
message Body {
  // Unique name for this body
  string name = 1;
  // Geometric primitives that define the shape of the body
  repeated Collider colliders = 2;
  // Diagonal of the inertia tensor of this body about its center-of-mass
  Vector3 inertia = 3;
  // Mass of this body in kg
  float mass = 4;
  // Prevents motion or rotation along specified axes for this body.
  Frozen frozen = 5;
}

// Primitive shape that composes the collision surface of a body.
message Collider {
  // A 6-sided rectangular prism
  message Box {
    // Half the size of the box in each dimension.
    Vector3 halfsize = 1;
  }
  // An infinite plane with normal vector (0, 0, 1)
  message Plane {}
  // A sphere
  message Sphere {
    float radius = 1;
  }
  // A cylinder with rounded ends.
  message Capsule {
    // Radius of the sphere at each rounded end
    float radius = 1;
    // End-to-end length of the capsule
    float length = 2;
    // Capsule end (0: both ends, 1: top end, -1: bottom end)
    int32 end = 3;
  }
  // A height map aligned with the x-y plane
  message HeightMap {
    float size = 1;
    repeated float data = 2;
  }
  // High-level message for containing elasticity and friction information
  message Material {
    // How much surfaces in contact resist translation
    float friction = 1;  // When unspecified, defaults to global friction coefficient
    // TODO: add elasticity coefficient (float elasticity = 2);
  }
  // Position relative to parent body
  Vector3 position = 1;
  // Rotation relative to parent body
  Vector3 rotation = 2;
  // A collider may only be one type
  oneof type {
    Box box = 3;
    Plane plane = 4;
    Sphere sphere = 5;
    Capsule capsule = 6;
    HeightMap heightMap = 7;
  }
  // Material properties (e.g. friction, elasticity) specific to the collider
  Material material = 8;
}

// Joints connect two bodies and restrain their movement to a rotational frame.
message Joint {
  // Min/max tuple.
  message Range {
    float min = 1;
    float max = 2;
  }
  // Unique name for this joint
  string name = 1;
  // Spring constant controlling the strength of this joint
  float stiffness = 2;
  // Parent body's name
  string parent = 3;
  // Child body's name
  string child = 4;
  // Offset from the parent's center of mass to the joint
  Vector3 parent_offset = 5;
  // Offset from the child's center of mass to the joint
  Vector3 child_offset = 6;
  // The offset rotation from the parent to the joint's coordinate system
  // The joint's local x, y, and z axes are made active by
  // supplying 1, 2, or 3 angle_limits, respectively.
  Vector3 rotation = 7;
  // Damps parent and child angular velocities to be equal
  float angular_damping = 8;
  // Limits for actuated axes.  Supply one Range for joint-local-x actuation
  // and two for x,y.
  repeated Range angle_limit = 9;
  // Strength of the force that restores joint to within the angle limits
  // If not set, defaults to a joint-dependent fraction of `stiffness`.
  optional float limit_strength = 10;
  // Damps the spring connecting the parent to the child
  // If not set, defaults to a joint-dependent fraction of `sqrt(stiffness)`.
  optional float spring_damping = 11;
  // The initial rotation between the parent and child, defined in terms of
  // an intrinsic euler rotation about parent's local axes.  This sets the
  // reference "zero" of the joint's rotation axes.
  Vector3 reference_rotation = 12;
}

// Actuators provide interactive control of a system via the step function.
// An actuator acts on a single joint.  It occupies as many dimensions in
// the action vector as there are ranges in its joint.
message Actuator {
  // Unique name for this actuator
  string name = 1;
  // Joint for this actuator
  string joint = 2;
  // Spring constant multiplier on input value to output torque
  float strength = 3;
  // Applies a direct torque to the joint
  message Torque {}
  // Drives a joint to a desired target angle of rotation about its axes
  message Angle {}
  // An actuator may only be one type
  oneof type {
    Torque torque = 4;
    Angle angle = 5;
  }
}

// Forces provide interactive control of a system via the step function.
// A force acts on a single body.  It occupies 3 positions in the action vector
// corresponding to the direction and magnitude of the force to apply, which is
// additionally multiplied by `strength`.
message Force {
  // Unique name for this force
  string name = 1;
  // Body for this force
  string body = 2;
  // Multiplier for intensity of force
  float strength = 3;
  // Applies a force to the center of the body in the specified direction
  message Thruster {}
  // A force may only be one type
  oneof type {
    Thruster thruster = 4;
  }
}

// DefaultState determines the default orientations of bodies in the system
// returned by the default_qp() function.
message DefaultState {
  message JointAngle {
    // Joint name
    string name = 1;
    // Default angles in degrees
    Vector3 angle = 2;
  }
  message QP {
    // Name of body
    string name = 1;
    // Position of body in world space
    Vector3 pos = 2;
    // Rotation of body in world space
    Vector3 rot = 3;
    // Velocity of body in world space
    Vector3 vel = 4;
    // Angular velocity of body in world space
    Vector3 ang = 5;
  }
  // Default joint angles.
  repeated JointAngle angles = 1;
  // Default orientations for root bodies (not a child of a joint).
  repeated QP qps = 2;
}

// The configuration of a system for Brax to simulate
message Config {
  message NamePair {
    string first = 1;
    string second = 2;
  }
  // All of the bodies in the system
  repeated Body bodies = 1;
  // All of the joints in the system
  repeated Joint joints = 2;
  // All of the actuators in the system
  repeated Actuator actuators = 3;
  // Forces to apply to bodies
  repeated Force forces = 16;
  // TODO: encapsulate global elasticity and friction into global material
  // Bounciness of all collisions
  float elasticity = 4;
  // How much surfaces in contact resist translation
  float friction = 5;
  // Uniform force applied to each body
  Vector3 gravity = 6;
  // Linear velocity damping applied to each body
  float velocity_damping = 7;
  // Angular velocity damping applied to each body
  float angular_damping = 8;
  // How aggressively interpenetrating bodies should push away from one another
  float baumgarte_erp = 9;
  // Pairs of bodies in the scene than can collide with one another
  repeated NamePair collide_include = 10;
  // Amount of time to simulate each step, in seconds
  float dt = 11;
  // How many substeps to perform to maintain numerical stability
  int32 substeps = 12;
  // Prevents motion or rotation along specified axes for the entire system
  Frozen frozen = 13;
  // Default states of bodies in the system
  repeated DefaultState defaults = 14;
  // Limits the number of collision checks per collider pair
  int32 collider_cutoff = 15;
}
